#include <stdio.h>
#include <semaphore.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>

#define buf_size 10
#define num_elements 50

int buffer[buf_size] = {};
int idx = 0;
int value;
int pctr = 0;
int cctr = 0;
sem_t sem_full;
sem_t sem_empty;
//declare lock variable;
pthread_mutex_t lock; //pthread_mutex_t is the lock variable type //can name it to anything

void add(int element)
{
	//this function will add an element to the buffer and perform index correction
	if (idx < buf_size) //can only add if idx is less than size (only when not full)
    {
        buffer[idx] = element;
        idx++;
    }
	else
	{
		printf("buffer is full = overflow\n");
	}
}

void delete(int element)
{
	//this funtion will delete an element to the buffer and perform index correction
	if (buffer[idx] >= 0) //there is still an element in index 0
    {
        idx--;
    }
    else
    {
        printf("buffer is empty = underflow\n");
    }
}

void *produce(void *arg)
{
	//call add here within mutex
	pthread_mutex_lock(&lock); //locks section from other threads
	for (int i = 0; i<num_elements; i++)
    {
        sem_wait(&sem_empty); // if sem_empty == 0, it locks the code
        
        value = rand()%100; // 0 to 100
        add(value);
        pctr++;
        
        sem_post(&sem_full); // increments
        
        printf("producer: added %d\n",value);
    }
    pthread_mutex_unlock(&lock); // unlocks section above for other threads
    pthread_exit(NULL);
}

void *consume(void *arg)
{
	//call delete here within mutex
	//pthread_mutex_lock(&lock); //locks section from other threads
	for (int i = 0; i<100; i++)
    {
        sem_wait(&sem_full);
        
        delete(value);
        cctr++;
        
        sem_post(&sem_empty);
        
        printf("consumer: removed %d\n", value);     
    }
    //pthread_mutex_unlock(&lock); // unlocks section above for other threads
    pthread_exit(NULL);
}

int main()
{
	pthread_mutex_init (&lock, NULL); //initialize lock
	pthread_t pid1; //producer 1
	pthread_t pid2; //producer2
	pthread_t cid; //consumer
	
	//initiate all semaphores here
	sem_init(&sem_empty, 1, 1); //sem_empty = 1 if buffer is empty, 0 if not empty //initialized as empty
	sem_init(&sem_full, 1, 0); //sem_full = 1 if buffer is full, 0 if not full  //initialized as not full
	
	//create threads
	pthread_create(&pid1, NULL, produce,NULL);
	pthread_create(&pid2, NULL, produce, NULL);
	pthread_create(&cid, NULL, consume, NULL);

	pthread_join(pid1, NULL); 
	pthread_join(pid2, NULL); 
	pthread_join(cid, NULL); 
	
	pthread_mutex_destroy(&lock); // destroy lock to free up space taken by lock
	
	printf("produce count: %i \n", pctr);
	printf("consume count: %i \n", cctr);
}


